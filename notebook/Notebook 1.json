{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "testpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f9027605-4f1b-4fc4-bf94-4f8814ffdada"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b3be1524-44b3-4038-a3a4-2a181b1a28f7/resourceGroups/synapse_test/providers/Microsoft.Synapse/workspaces/uksouthtestmir/bigDataPools/testpool",
				"name": "testpool",
				"type": "Spark",
				"endpoint": "https://uksouthtestmir.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import matplotlib.pyplot as plt\r\n",
					"import numpy as np\r\n",
					"\r\n",
					"fig = plt.figure()\r\n",
					"ax = fig.add_subplot(111, projection = '3d')\r\n",
					"\r\n",
					"x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n",
					"y = np.random.randint(10, size=10)\r\n",
					"z = np.zeros(10)\r\n",
					"\r\n",
					"dx = np.ones(10)\r\n",
					"dy = np.ones(10)\r\n",
					"dz = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n",
					"\r\n",
					"ax.bar3d(x, y, z, dx, dy, dz, color='g')\r\n",
					"\r\n",
					"ax.set_xlabel('x axis')\r\n",
					"ax.set_ylabel('y axis')\r\n",
					"ax.set_zlabel('z axis')\r\n",
					"plt.title(\"3D Bar Chart Example\")\r\n",
					"plt.tight_layout()\r\n",
					"plt.show()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import matplotlib.pyplot as plt\r\n",
					"import numpy as np\r\n",
					"\r\n",
					"# Make a 10 x 10 heatmap of some random data\r\n",
					"side_length = 10\r\n",
					"# Start with a 10 x 10 matrix with values randomized around 5\r\n",
					"data = 5 + np.random.randn(side_length, side_length)\r\n",
					"# The next two lines make the values larger as we get closer to (9, 9)\r\n",
					"data += np.arange(side_length)\r\n",
					"data += np.reshape(np.arange(side_length), (side_length, 1))\r\n",
					"# Generate the heatmap\r\n",
					"fig = plt.figure()\r\n",
					"ax = fig.add_subplot(111)\r\n",
					"sns.heatmap(data, ax=ax)\r\n",
					"plt.show()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import * \r\n",
					"from pyspark.sql.functions import * \r\n",
					"\r\n",
					"delta_table_path = \"Your delta table path\" #fill in your delta table path \r\n",
					"delta_table = DeltaTable.forPath(spark, delta_table_path) \r\n",
					"\r\n",
					"# Update every even value by adding 100 to it \r\n",
					"delta_table.update( \r\n",
					"  condition = expr(\"id % 2 == 0\"), \r\n",
					"  set = { \"id\": expr(\"id + 100\") }) \r\n",
					"delta_table.toDF().show() \r\n",
					"\r\n",
					"# Delete every even value \r\n",
					"delta_table.delete(\"id % 2 == 0\") \r\n",
					"delta_table.toDF().show() \r\n",
					"\r\n",
					"# Upsert (merge) new data \r\n",
					"new_data = spark.range(0,20).alias(\"newData\") \r\n",
					"\r\n",
					"delta_table.alias(\"oldData\") \r\n",
					"    .merge(new_data.alias(\"newData\"), \"oldData.id = newData.id\") \r\n",
					"    .whenMatchedUpdate(set = { \"id\": lit(\"-1\")}) \r\n",
					"    .whenNotMatchedInsert(values = { \"id\": col(\"newData.id\") }) \r\n",
					"    .execute() \r\n",
					"\r\n",
					"delta_table.toDF().show(100)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			}
		]
	}
}